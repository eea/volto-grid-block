@import 'globals.less';

@addon: 'volto-gridlayout';
@addontype: 'gridlayout';
@addonelement: 'layout';

.loadAddonVariables();

.grid-layout {
  display: flex;
  flex-flow: row wrap;
  justify-content: inherit;
  align-items: flex-start;
  width: 100% !important;
  padding: 0rem;

  .grid-block {
    border: 1px dashed #EC776A;
    padding: 1em;
  }

  .row {
    display: flex;
    flex-flow: row wrap;
    justify-content: inherit;
    align-items: flex-start;
    width: 100%;
    text-align: left;
    position: relative;
    margin-top: 1.5rem;
    &.edit {
      border: 1px dashed #4296B3;
      padding: 1em;
    }
  }

  .block-edit-wrapper {
    height: 100%;
    min-height: 60px;
    position: relative;
    background: transparent !important;
    box-shadow: 0px 1px 2px 0 #C7D5D8;
    border-radius: 0;
    border: 1px solid #C7D5D8;
    .block-edit-control {
      text-align: center;
      .icon {
        cursor: pointer;
        &:hover {
          opacity: 0.9;
        }
      }
    }

    .block.image {
      height: 80% !important;
      > img {
        height: 100% !important;
      }
    }
  }

  .block-edit-toolbar {
    background: #4296B3;
    padding: 4px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-flow: row;
    .icon {
      cursor: pointer;
      &:hover {
        opacity: 0.9;
      }
    }
  }

  .column {
    &[data-rbd-draggable-context-id] {
      margin-bottom: 0;
    }
  }
  &:not(.edit) {
    .block.image {
      height: 100%;
      .scene {
        height: 80%;
        .card {
          height: 100%;
          .card__face {
            height: 100%;
            img {
              height: 100% !important;
            }
          }
        }
      }
    }
  }
}

@display: block, flex, grid, inline-block, initial, inherit, none;
@align-items: stretch, center, flex-start, flex-end, baseline, initial, inherit;
@justify-content: flex-start, flex-end, center, space-between, space-around, initial, inherit;
@text-align: left, right, center, justify, initial, inherit;
@range: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;
@position: {
  top: t;
  bottom: b;
  left: l;
  right: r;
  default: a;
}

.makeProperty(@property, @value, @super) when (@super) {
  @procesedValue: if(isnumber(@value) and @value > 0 and not(ispercentage(@value)), e(%('%srem', @value)), @value);
  @{property}: @procesedValue !important;
}

.makeProperty(@property, @value, @super) when (not(@super)) {
  @procesedValue: if(isnumber(@value) and @value > 0 and not(ispercentage(@value)), e(%('%srem', @value)), @value);
  @{property}: @procesedValue;
}

.makeClassByArray(@array, @property, @class, @super) when (@super) {
  each(@array, {
    .@{class}-@{value}-super {
      .makeProperty(@property, @value, @super);
    }
  })
}

.makeClassByArray(@array, @property, @class, @super) when (not(@super)) {
  each(@array, {
    .@{class}-@{value} {
      .makeProperty(@property, @value, @super);
    }
  })
}

.makeClassByObject(@object, @values, @property, @class, @super) {
  each(@object, {
    @objectKey: if(@key = default, '', e(%('-%s', @key)));
    .makeClassByArray(@range, e(%('%s%s', @property, @objectKey)), e(%('%s%s', @class, @value)), @super );
  })
}

.makeClassByObject(@position, @range, margin, m, false);
.makeClassByObject(@position, @range, margin, m, true);
.makeClassByObject(@position, @range, padding, p, false);
.makeClassByObject(@position, @range, padding, p, true);

.makeClassByArray(@display, display, display, false);
.makeClassByArray(@display, display, display, true);
.makeClassByArray(@align-items, align-items, align-items, false);
.makeClassByArray(@align-items, align-items, align-items, true);
.makeClassByArray(@justify-content, justify-content, justify-content, false);
.makeClassByArray(@justify-content, justify-content, justify-content, true);
.makeClassByArray(@text-align, text-align, text-align, false);
.makeClassByArray(@text-align, text-align, text-align, true);

.viewport-columns(@class, @super) {
  each(@range, {
    @processedClass: if(@super, e(%('%s-%s-super', @class, @value)), e(%('%s-%s', @class, @value)));
    .@{processedClass} {
      @procesedValue: 100% / (12 / @value);
      .makeProperty(width,  @procesedValue, @super);
    }
  })
}

[class*='desktop-'],
[class*='tablet-'],
[class*='phone-'],
[class*='widescreen-'] {
  margin: 0;
}

@large: 1600px;
@medium: 1200px;
@small: 768px;
@smallest: 500px;

.viewport-columns(column, false);
.viewport-columns(column, true);

@media (min-width: @smallest) {
  .viewport-columns(xs, false);
  .viewport-columns(xs, true);
  .makeClassByObject(@position, @range, margin, xs-m, true);
  .makeClassByObject(@position, @range, padding, xs-p, true);
}

@media (min-width: @small) {
  .viewport-columns(sm, false);
  .viewport-columns(sm, true);
  .makeClassByObject(@position, @range, margin, sm-m, true);
  .makeClassByObject(@position, @range, padding, sm-p, true);
}

@media (min-width: @medium) {
  .viewport-columns(md, false);
  .viewport-columns(md, true);
  .makeClassByObject(@position, @range, margin, md-m, true);
  .makeClassByObject(@position, @range, padding, md-p, true);
}

@media (min-width: @large) {
  .viewport-columns(lg, false);
  .viewport-columns(lg, true);
  .makeClassByObject(@position, @range, margin, lg-m, true);
  .makeClassByObject(@position, @range, padding, lg-p, true);
}

&.layout-lg {
  width: 1600px !important;
  .viewport-columns(lg, false);
}

&.layout-md {
  width: 1200px !important;
  .viewport-columns(md, false);
}

&.layout-sm {
  width: 768px !important;
  .viewport-columns(sm, false);
}

&.layout-xs {
  width: 350px !important;
  .viewport-columns(xs, false);
}

.grid-block-modal {
  .ui.input > input {
    padding: 0.5rem 1rem;
  }

  .description {
    display: flex;
    flex-flow: column;
    flex-wrap: wrap;
    .description-item {
      margin: 1rem 0;
      display: flex;
      flex-flow: column;
      align-items: flex-start;
    }
    .column-layout-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-gap: 1em;
    }
  }
}

.loadAddonOverrides();
